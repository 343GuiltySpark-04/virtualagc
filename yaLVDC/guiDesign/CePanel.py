#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.2
#  in conjunction with Tcl version 8.6
#    May 11, 2020 06:04:15 PM CDT  platform: Linux

import sys

try:
  import Tkinter as tk
except ImportError:
  import tkinter as tk

try:
  import ttk
  py3 = False
except ImportError:
  import tkinter.ttk as ttk
  py3 = True

import CePanel_support

def vp_start_gui():
  '''Starting point when module is the main routine.'''
  global val, w, root
  root = tk.Tk()
  top = topCePanel (root)
  CePanel_support.init(root, top)
  root.mainloop()

w = None
def create_topCePanel(rt, *args, **kwargs):
  '''Starting point when module is imported by another module.
     Correct form of call: 'create_topCePanel(root, *args, **kwargs)' .'''
  global w, w_win, root
  #rt = root
  root = rt
  w = tk.Toplevel (root)
  top = topCePanel (w)
  CePanel_support.init(w, top, *args, **kwargs)
  return (w, top)

def destroy_topCePanel():
  global w
  w.destroy()
  w = None

class topCePanel:
  def __init__(self, top=None):
    '''This class configures and populates the toplevel window.
       top is the toplevel containing window.'''
    _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
    _fgcolor = '#000000'  # X11 color: 'black'
    _compcolor = '#d9d9d9' # X11 color: 'gray85'
    _ana1color = '#d9d9d9' # X11 color: 'gray85'
    _ana2color = '#ececec' # Closest X11 color: 'gray92'
    self.style = ttk.Style()
    if sys.platform == "win32":
      self.style.theme_use('winnative')
    self.style.configure('.',background=_bgcolor)
    self.style.configure('.',foreground=_fgcolor)
    self.style.configure('.',font="TkDefaultFont")
    self.style.map('.',background=
      [('selected', _compcolor), ('active',_ana2color)])

    top.geometry("437x731")
    top.minsize(1, 1)
    top.maxsize(5105, 1170)
    top.resizable(0, 0)
    top.title("C. E. Panel")

    self.TPanedwindow1 = ttk.Panedwindow(top, orient="vertical")
    self.TPanedwindow1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
    self.TPanedwindow1_p1 = ttk.Labelframe(height=75, text='ACCUMULATOR')
    self.TPanedwindow1.add(self.TPanedwindow1_p1, weight=2)
    self.TPanedwindow1_p2 = ttk.Labelframe(height=37.5
        , text='MEMORY BUFFER REGISTER')
    self.TPanedwindow1.add(self.TPanedwindow1_p2, weight=2)
    self.TPanedwindow1_p3 = ttk.Labelframe(height=26.1, text='PROCESSOR TIMING')
    self.TPanedwindow1.add(self.TPanedwindow1_p3, weight=5)
    self.TPanedwindow1_p4 = ttk.Labelframe(text='TAPE READER')
    self.TPanedwindow1.add(self.TPanedwindow1_p4, weight=1)
    self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

  def __adjust_sash0(self, event):
    paned = event.widget
    pos = [177, 325, 606, ]
    i = 0
    for sash in pos:
      paned.sashpos(i, sash)
      i += 1
    paned.unbind('<map>', self.__funcid0)
    del self.__funcid0

if __name__ == '__main__':
  vp_start_gui()





