 /* 
    License:    Declared to be in the Public Domain by its author,
    		Ron Burkey.
    Filename:	val.hal
    
    This is just some code I'm using with the yaHAL-S-FC.py interpreter
    for simple regression testing, and which I don't feel like manually
    retyping every time.  Notice that all of the actual HAL/S lines
    (as opposed to interpreter commands) don't end in ';' (i.e., they
    have a dummy space at the end) except for the final line, since
    the interpreter won't process the batch until it finds a line
    ending in ';'. If fed directly to the compiler rather than the
    interpreter, that wouldn't be an issue.  But I'm cut-and-pasting
    it into the interpreter.
    
    I've also begun each line in column 2, which isn't necessary
    for the interpreter, but which allows the file to be processed
    by the compiler if desired.
    
    The *original* HAL/S-FC compiler wouldn't accept this code, by the
    way, since it would have to be wrapped in a PROGRAM, FUNCTION,
    or PROCEDURE envelope, rather than just being standalone code
    like this. But I've configured the modern compiler to accept it, 
    largely because the interpreter be pretty useless if it accepted
    only complete programs rather than little snippets of code. 
 */
    
 DECLARE SCALAR, T, X INITIAL(2.0), Y CONSTANT(3.0), Z DOUBLE; 
 DECLARE A, B DOUBLE, C INITIAL(4.0), D SCALAR CONSTANT(2 Y - 12); 
 DECLARE INTEGER, I, J CONSTANT(4 D + 2), K INITIAL(J + D); 
 DECLARE L INTEGER DOUBLE, M INTEGER; 
 DECLARE CHARACTER(20), C1, C2 INITIAL('abc'), C3 CONSTANT('def'), 
 	 C4 CONSTANT(C3 CAT 'ghi'); 
 DECLARE C5 CHARACTER(30), C6 CHARACTER(20) INITIAL('sam ' CAT C3); 
 DECLARE BOOLEAN, B1, B2 CONSTANT(TRUE), B3 INITIAL(NOT B2); 
 DECLARE B4 BOOLEAN, B5 BOOLEAN CONSTANT(NOT B2 AND B2), 
 	 B6 BOOLEAN INITIAL(B2 OR ~B2); 
 
 WRITE(6) 'Miscellaneous tests:'; 
 I=1.4; WRITE(6) 'I =', I, '(should be 1)'; 
 A=2; WRITE(6) 'A =', A, '(should be 2.0)'; 
 B = 12.6E2B-1 A + 6 ( I A**3 - 21 ) / 4.2; 
 WRITE(6) 'B =', B, '(should be 1241.428571...)'; 
 WRITE(6) B2, B3, B5, B6, '(should be TRUE FALSE FALSE TRUE)'; 
 WRITE(6) B2, ~B2, ~B2 & B2, B2 | NOT B2, '(should be TRUE FALSE FALSE TRUE)'; 
 WRITE(6) '"' CAT C2 CAT '"', 
 	  '"' CAT C3 || '"', 
 	  '"' || C4 CAT '"', 
 	  '"' || C6 || '"', 
 	  ' (should be "abc", "def", "defghi", "sam def")'; 
 
 IF TRUE THEN WRITE(6) TRUE, '(should be TRUE)'; 
 WRITE(6) 'Test IF FALSE; should be nothing between here ...'; 
 IF FALSE THEN WRITE(6) FALSE; 
 WRITE(6) '... and here.'; 
 WRITE(6) 'Test IF TRUE THEN ...; ELSE ...; should be TRUE:'; 
 IF TRUE THEN WRITE(6) TRUE; ELSE WRITE(6) FALSE; 
 WRITE(6) 'Test IF FALSE THEN ...; ELSE ...; should be FALSE:'; 
 IF FALSE THEN WRITE(6) TRUE; ELSE WRITE(6) FALSE; 
 WRITE(6) 'The following IF/THEN/ELSE tests should read ',
 	'<, >=, >=, <=, <=, >, >, <=, <=, >=, >=, <, ~=, =, ~=, ~=, =, ~= :'; 
 I = 5; 
 IF I < 10 THEN WRITE(6) '<'; ELSE WRITE(6) '>='; 
 IF I < 5 THEN WRITE(6) '<'; ELSE WRITE(6) '>='; 
 IF I < 2 THEN WRITE(6) '<'; ELSE WRITE(6) '>='; 
 IF I <= 10 THEN WRITE(6) '<='; ELSE WRITE(6) '>'; 
 IF I <= 5 THEN WRITE(6) '<='; ELSE WRITE(6) '>'; 
 IF I <= 2 THEN WRITE(6) '<='; ELSE WRITE(6) '>'; 
 IF I > 2 THEN WRITE(6) '>'; ELSE WRITE(6) '<='; 
 IF I > 5 THEN WRITE(6) '>'; ELSE WRITE(6) '<='; 
 IF I > 10 THEN WRITE(6) '>'; ELSE WRITE(6) '<='; 
 IF I >= 2 THEN WRITE(6) '>='; ELSE WRITE(6) '<'; 
 IF I >= 5 THEN WRITE(6) '>='; ELSE WRITE(6) '<'; 
 IF I >= 10 THEN WRITE(6) '>='; ELSE WRITE(6) '<'; 
 IF I = 2 THEN WRITE(6) '='; ELSE WRITE(6) '~='; 
 IF I = 5 THEN WRITE(6) '='; ELSE WRITE(6) '~='; 
 IF I = 10 THEN WRITE(6) '='; ELSE WRITE(6) '~='; 
 IF I ~= 2 THEN WRITE(6) '~='; ELSE WRITE(6) '='; 
 IF I ~= 5 THEN WRITE(6) '~='; ELSE WRITE(6) '='; 
 IF I ~= 10 THEN WRITE(6) '~='; ELSE WRITE(6) '='; 
 WRITE(6) 'The following IF THEN ELSE string comparisons should be ',
 	'TRUE, TRUE, and FALSE, respectively.'; 
 IF 'ABC' = 'A' || 'BC' THEN WRITE(6) TRUE; ELSE WRITE(6) FALSE; 
 IF 'AB' || 'C' = 'ABC' THEN WRITE(6) TRUE; ELSE WRITE(6) FALSE; 
 IF 'ABC' = 'AB' THEN WRITE(6) TRUE; ELSE WRITE(6) FALSE; 
 
 WRITE(6) 'Print 10 random numbers with DO WHILE arithmetical comparison:'; 
 I=0; DO WHILE I < 10; I=I+1; WRITE(6) I, RANDOM; END; 
 WRITE(6) 'Print 9 TRUE and 1 FALSE with DO WHILE boolean constant:'; 
 B1=TRUE; I=0; 
 DO WHILE B1; 
 	I=I+1; 
 	IF I>=10 THEN B1=FALSE; 
 	WRITE(6) I, B1; 
 END; 
 WRITE(6) 'Test DO WHILE FALSE; should be nothing between here ...'; 
 DO WHILE FALSE; WRITE(6) ' SOMETHING!'; END; 
 WRITE(6) '... and here.'; 
 
 WRITE(6) 'Print 10 random (Gaussian) with DO UNTIL arithmetical comparison:'; 
 I=0; DO UNTIL I >= 10; I=I+1; WRITE(6) I, RANDOMG; END; 
 WRITE(6) 'Test DO UNTIL FALSE; should be SOMETHING between here ...'; 
 DO UNTIL TRUE; WRITE(6) ' SOMETHING!'; END; 
 WRITE(6) '... and here.'; 
 WRITE(6) 'Built-in RUNTIME function test (increment once per second):'; 
 WRITE(6) 'Uses DO WHILE DO UNTIL for the nested loops.';  
 I=1; 
 M=ROUND(RUNTIME); 
 DO WHILE I <= 10; 
 	DO UNTIL L > M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	WRITE(6) I, M; 
 	I = I + 1; 
 	M = L; 
 END; 
 WRITE(6) 'Again, but with DO UNTIL DO WHILE loop nesting:'; 
 I=1; 
 M=ROUND(RUNTIME); 
 DO UNTIL I > 10; 
 	L = ROUND(RUNTIME); 
 	DO WHILE L <= M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	WRITE(6) I, M; 
 	I = I + 1; 
 	M = L; 
 END; 
 WRITE(6) 'And still again, with DO UNTIL DO UNTIL loop nesting:'; 
 I=1; 
 M=ROUND(RUNTIME); 
 DO UNTIL I > 10; 
 	DO UNTIL L > M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	WRITE(6) I, M; 
 	I = I + 1; 
 	M = L; 
 END; 
 WRITE(6) 'This time, with a DO FOR TEMPORARY loop:'; 
 M=ROUND(RUNTIME); 
 DO FOR TEMPORARY I = 1 TO 10; 
 	DO UNTIL L > M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	M = L; 
 	WRITE(6) I, M; 
 END; 
 WRITE(6) 'This time with a DO FOR TEMPORARY BY 2:'; 
 M=ROUND(RUNTIME); 
 DO FOR TEMPORARY I = 1 TO 20 BY 2; 
 	DO UNTIL L > M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	M = L; 
 	WRITE(6) I, M; 
 END; 
 WRITE(6) 'This time, DO FOR BY -1:'; 
 M=ROUND(RUNTIME); 
 DO FOR TEMPORARY I = 10 TO 1 BY -1; 
 	DO UNTIL L > M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	M = L; 
 	WRITE(6) I, M; 
 END; 
 WRITE(6) 'This time, DO FOR UNTIL:'; 
 M=ROUND(RUNTIME); 
 DO FOR TEMPORARY I = 1 TO 100 UNTIL I >= 10; 
 	DO UNTIL L > M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	M = L; 
 	WRITE(6) I, M; 
 END; 
 WRITE(6) 'This time, DO FOR WHILE:'; 
 M=ROUND(RUNTIME); 
 DO FOR TEMPORARY I = 1 TO 100 WHILE I <= 10; 
 	DO UNTIL L > M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	M = L; 
 	WRITE(6) I, M; 
 END; 
 WRITE(6) 'This time with a SCALAR loop index (1.4 to 26.3 by 1.7):'; 
 M=ROUND(RUNTIME); 
 DO FOR A = 1.4 TO 26.3 BY 1.7; 
 	DO UNTIL L > M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	M = L; 
 	WRITE(6) A, M; 
 END; 
 WRITE(6) 'Again, but backwards (25.2 to 0.0 by -1.7):'; 
 M=ROUND(RUNTIME); 
 DO FOR A = 25.2 TO 0.0 BY -1.7; 
 	DO UNTIL L > M; 
 		L = ROUND(RUNTIME); 
 	END; 
 	M = L; 
 	WRITE(6) A, M; 
 END; 
 
 WRITE(6) 'Execution-speed timing measurement:'; 
 DECLARE STIME, ETIME; 
 STIME = RUNTIME; 
 M = 100000; 
 I = 0; DO WHILE I < M; I = I + 1; END; 
 ETIME = RUNTIME; 
 WRITE(6) M, 'iterations,', ETIME-STIME, 'seconds, ', 
 	  ROUND(M/(ETIME-STIME)), 'iterations/second.'; 
 
 WRITE(6) 'Some tests of FUNCTION follow:'; 
  /* Function that averages 3 floats. */ 
 AVG3: 
 FUNCTION(X, Y, Z) SCALAR; 
 	DECLARE SCALAR, X, Y, Z, T; 
 
 	/* Function that adds 3 floats. */
 	ADD3: 
 	FUNCTION(X, Y, Z) SCALAR; 
 		DECLARE X, Y, Z; 
 		DECLARE ADD2 FUNCTION SCALAR; 
 		RETURN ADD2(X, ADD2(Y, Z)); 
 		
 		/* Function that adds 2 floats. */
 		ADD2: 
 		FUNCTION(X, Y) SCALAR; 
 			DECLARE X, Y; 
 			RETURN X + Y; 
 		CLOSE; 
 		
 	CLOSE ADD3; 
 
	T = ADD3(X, Y, Z); 
 	RETURN T/3; 
 CLOSE AVG3; 
 
 WRITE(6) 'The following should print out (4+5+7)/3 = 5.33...'; 
 WRITE(6) AVG3(4, 5, 7); 
 
 /* A "projection" function that picks out just one
    parameter from among three, using W as an index. */
 PROJECTION3: 
 FUNCTION(W, X, Y, Z); 
 	DECLARE X, Y, Z; 
 	DECLARE W INTEGER; 
 	IF W = 1 THEN RETURN X; 
 	IF W = 2 THEN RETURN Y; 
 	IF W = 3 THEN RETURN Z; 
 	RETURN 0; 
 CLOSE PROJECTION3; 
 
 WRITE(6) 'The following 3 lines should print 100, 200, and 300, respectively.'; 
 WRITE(6) PROJECTION3(1, 100, 200, 300); 
 WRITE(6) PROJECTION3(2, 100, 200, 300); 
 WRITE(6) PROJECTION3(3, 100, 200, 300); 
 
 WRITE(6) 'Some tests of PROCEDUREs ...'; 
 DECLARE X1 SCALAR INITIAL(0), Y1 SCALAR INITIAL(1), Z1 SCALAR INITIAL(2); 
 P: 
 PROCEDURE(X) ASSIGN(Y); 
	 DECLARE X, Y; 
	 Y=X; 
 CLOSE; 
 CALL P(39) ASSIGN(Z1); 
 WRITE(6) Y1, Z1, '(should be 1.0 and 39.0)'; 
 
 P2: 
 PROCEDURE(A, B, C) ASSIGN(D, E, F); 
	 DECLARE A, B, C, D, E, F; 
	 D = A; 
	 E = B; 
	 F = C; 
 CLOSE P2; 
 CALL P2(123, 245, 789) ASSIGN(X1, Y1, Z1); 
 WRITE(6) X1, Y1, Z1, 'should be 123.0, 245.0, 789.0'; 
 
 WRITE(6) 'Done.';
