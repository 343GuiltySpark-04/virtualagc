 /* 
    License:    Declared to be in the Public Domain by its author,
    		Ron Burkey.
    Purpose:	Validation and regression testing of the "modern" HAL/S
    		compiler
    Filename:	val.hal
 */
 
 /* This constant either enables (TRUE) or disables (FALSE) the time-consuming
    4.xx tests. */
 DECLARE TEST4 BOOLEAN INITIAL(TRUE);
 WRITE(6) 'Enter 0 to disable time-consuming tests, non-zero to enable.';
 READ(5) TEST4;
 
 /* 
 	-------------------------------------------------------------
 	Some functions for helping to automate tests of declarations.
 	-------------------------------------------------------------
 */
 
 TESTCHAR: FUNCTION(IDENTIFIER, TYPE, FIELD, VALUE) BOOLEAN;
 	DECLARE CHARACTER(32), TYPE, IDENTIFIER;
 	DECLARE CHARACTER(2048), VALUE;
 	DECLARE INTEGER, FIELD;
 	DECLARE TEST ARRAY(20) CHARACTER(256);
 	TEST = typeof(IDENTIFIER);
 	IF TEST$1 = TYPE AND TEST$FIELD = VALUE THEN RETURN TRUE;
 	RETURN FALSE;
 CLOSE TESTCHAR;
 
 TESTINT: FUNCTION(IDENTIFIER, TYPE, FIELD, VALUE) BOOLEAN;
 	DECLARE CHARACTER(32), TYPE, IDENTIFIER;
 	DECLARE INTEGER, FIELD, VALUE;
 	DECLARE TEST ARRAY(20) CHARACTER(256);
 	TEST = typeof(IDENTIFIER);
 	IF TEST$1 = TYPE AND INTEGER(TEST$FIELD) = VALUE THEN RETURN TRUE;
 	RETURN FALSE;
 CLOSE TESTINT;
 
 TESTSCALAR: FUNCTION(IDENTIFIER, TYPE, FIELD, VALUE) BOOLEAN;
 	DECLARE CHARACTER(32), IDENTIFIER, TYPE;
 	DECLARE INTEGER, FIELD;
 	DECLARE SCALAR, VALUE;
 	DECLARE TEST ARRAY(20) CHARACTER(256);
 	TEST = typeof(IDENTIFIER);
 	IF TEST$1 = TYPE AND SCALAR(TEST$FIELD) = VALUE THEN RETURN TRUE;
 	RETURN FALSE;
 CLOSE TESTSCALAR;

 /* 
 	-------------------------------------------------------------
 	The tests themselves.
 	-------------------------------------------------------------
 */
 
 WRITE(6) ;
 WRITE(6) 'Each test has a test number, such as 1.23 or 4.56B.';
 WRITE(6) 'Unless otherwise stated, 1 represents success and 0 is failure.';
 WRITE(6) ;
 
 DECLARE SCALAR, T, X INITIAL(2.0), Y CONSTANT(3.0), Z DOUBLE;
 WRITE(6) '1.00:', 
 	TESTCHAR('T', 'SCALAR', 16, ''),
 	TESTSCALAR('X', 'SCALAR', 5, 2.0),
 	TESTSCALAR('Y', 'SCALAR', 4, 3.0),
 	TESTCHAR('Z', 'SCALAR', 6, 'DOUBLE');
 	
 DECLARE A, B DOUBLE, C INITIAL(4.0), D SCALAR CONSTANT(2 Y - 12);
 WRITE(6) '1.01:',
 	TESTCHAR('A', 'SCALAR', 6, ''),
 	TESTCHAR('B', 'SCALAR', 6, 'DOUBLE'),
 	TESTSCALAR('C', 'SCALAR', 5, 4.0),
 	TESTSCALAR('D', 'SCALAR', 4, -6.0);
 	
 DECLARE INTEGER, I, J CONSTANT(4 D + 2), K INITIAL(J + D);
 WRITE(6) '1.02:',
 	TESTCHAR('I', 'INTEGER', 4, ''),
 	TESTINT('J', 'INTEGER', 4, -22),
 	TESTINT('K', 'INTEGER', 5, -28);
 
 DECLARE L INTEGER DOUBLE, M INTEGER;
 WRITE(6) '1.03:',
 	TESTCHAR('L', 'INTEGER', 6, 'DOUBLE'),
 	TESTCHAR('M', 'INTEGER', 6, '');
 
 DECLARE CHARACTER(20), C1, C2 INITIAL('abc'), C3 CONSTANT('def'),
 	C4 CONSTANT(C3 CAT 'ghi');
 WRITE(6) '1.04:',
 	TESTINT('C1', 'CHARACTER', 2, 20),
 	TESTCHAR('C2', 'CHARACTER', 5, 'abc'),
 	TESTCHAR('C3', 'CHARACTER', 4, 'def'),
 	TESTCHAR('C4', 'CHARACTER', 4, 'defghi');
 	
 DECLARE C5 CHARACTER(30), C6 CHARACTER(20) INITIAL('sam ' CAT C3);
 WRITE(6) '1.05:',
 	TESTINT('C5', 'CHARACTER', 2, 30),
 	TESTCHAR('C6', 'CHARACTER', 5, 'sam def');
 	
 DECLARE BOOLEAN, B1, B2 CONSTANT(TRUE), B3 INITIAL(NOT B2);
 WRITE(6) '1.06A:', TESTINT('B1', 'BIT', 2, 1);
 IF B2 AND TESTINT('B2', 'BIT', 2, 1) THEN WRITE(6) '1.06B:', TRUE; 
 ELSE WRITE(6) '1.06B:', FALSE;
 IF NOT B3 AND TESTINT('B3', 'BIT', 2, 1) THEN WRITE(6) '1.06C:', TRUE; 
 ELSE WRITE(6) '1.06C', FALSE;
 /* 
    I wanted to write some of the 1.06x tests in the form
 	IF B2 = TRUE AND TESTINT(...) THEN ...
    and
    	IF B3 = FALSE AND TESTINT(...) THEN ...
    but curiously, even though a <RELATIONAL EXP> like B2=TRUE evaluates
    to a BOOLEAN value, you can't use it in a <BIT EXP>.
    I don't know if that's a real thing, or a bug in the BNF.
 */
 	
 DECLARE B4 BOOLEAN, B5 BOOLEAN CONSTANT(NOT B2 AND B2), 
 	 B6 BOOLEAN INITIAL(B2 OR ~B2); 
 WRITE(6) '1.07A:', TESTINT('B4', 'BIT', 2, 1);
 IF NOT B5 AND TESTCHAR('B5', 'BIT', 4, '0, 1') THEN WRITE(6) '1.07B:', TRUE;
 ELSE WRITE(6) '1.07B', FALSE;
 IF B6 AND TESTCHAR('B6', 'BIT', 5, '1, 1') THEN WRITE(6) '1.07C:', TRUE;
 ELSE WRITE(6) '1.07C', FALSE;
 
 DECLARE CV1 CONSTANT(2); 
 DECLARE VN1 VECTOR(5); 
 DECLARE VN1A VECTOR(CV1 + 3); 
 WRITE(6) '1.08A',
 	TESTSCALAR('CV1', 'SCALAR', 4, 2.0),
 	TESTINT('VN1', 'VECTOR', 2, 5),
 	TESTINT('VN1A', 'VECTOR', 2, 5);
 DECLARE VN2 VECTOR(10) INITIAL(2.47); 
 DECLARE VN2A VECTOR(10) INITIAL(CV1 + 0.47); 
 DECLARE VN3 VECTOR(20) INITIAL(1, 2, 3, 4, 5, *); 
 WRITE(6) '1.08B',
 	TESTCHAR('VN2', 'VECTOR', 5, 
 		'2.47, 2.47, 2.47, 2.47, 2.47, 2.47, 2.47, 2.47, 2.47, 2.47'), 
 	TESTCHAR('VN2A', 'VECTOR', 5, 
 		'2.47, 2.47, 2.47, 2.47, 2.47, 2.47, 2.47, 2.47, 2.47, 2.47'), 
 	TESTCHAR('VN3', 'VECTOR', 5,
 		'1.0, 2.0, 3.0, 4.0, 5.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None');
 DECLARE VN3A VECTOR(3 CV1) INITIAL(1, CV1, 3, 4, 1 + CV1 2, *); 
 DECLARE VN4 VECTOR(15) CONSTANT(12); 
 DECLARE VN4A VECTOR(15) CONSTANT(12, CV1 + 11, 2 CV1 +10, *); 
 WRITE(6) '1.08C',
 	TESTCHAR('VN3A', 'VECTOR', 5,
 		'1.0, 2.0, 3.0, 4.0, 5.0, None'),
 	TESTCHAR('VN4', 'VECTOR', 4,
 		'12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0'),
 	TESTCHAR('VN4A', 'VECTOR', 4,
 		'12.0, 13.0, 14.0, None, None, None, None, None, None, None, None, None, None, None, None');
 		
 WRITE(6) ;
 I = 1.4;
 A = 2;
 B = 12.6E2B-1 A + 6 ( I A**3 - 21 ) / 4.2;
 IF I = 1 THEN WRITE(6) '2.00A:', TRUE;
 ELSE WRITE(6) '2.00A:', FALSE;
 IF A = 2.0 THEN WRITE(6) '2.00B:', TRUE;
 ELSE WRITE(6) '2.00B:', FALSE;
 IF ABS(B - 1241.428571) <= 0.0000005 THEN WRITE(6) '2.00C:', TRUE; 
 ELSE WRITE(6) '2.00C:', FALSE;
 IF TRUE THEN WRITE(6) '2.00D:', TRUE;
 ELSE WRITE(6) '2.00D:', FALSE;
 IF FALSE THEN WRITE(6) '2.00E:', FALSE;
 ELSE WRITE(6) '2.00D:', TRUE;
 IF NOT FALSE THEN WRITE(6) '2.00D:', TRUE;
 ELSE WRITE(6) '2.00D:', FALSE;
 IF NOT TRUE THEN WRITE(6) '2.00E:', FALSE;
 ELSE WRITE(6) '2.00E:', TRUE;
 I = 5; 
 IF I < 10 THEN WRITE(6) '2.01A:', TRUE;
 ELSE WRITE(6) '2.01A', FALSE; 
 IF I < 5 THEN WRITE(6) '2.01B:', FALSE; 
 ELSE WRITE(6) '2.01B:', TRUE; 
 IF I < 2 THEN WRITE(6) '2.01C:', FALSE; 
 ELSE WRITE(6) '2.01C:', TRUE; 
 IF I <= 10 THEN WRITE(6) '2.01D:', TRUE; 
 ELSE WRITE(6) '2.01D:', FALSE; 
 IF I <= 5 THEN WRITE(6) '2.01E:', TRUE; 
 ELSE WRITE(6) '2.01E:', FALSE; 
 IF I <= 2 THEN WRITE(6) '2.01F:', FALSE; 
 ELSE WRITE(6) '2.01F:', TRUE; 
 IF I > 2 THEN WRITE(6) '2.01G:', TRUE; 
 ELSE WRITE(6) '2.01G:', FALSE; 
 IF I > 5 THEN WRITE(6) '2.01H:', FALSE; 
 ELSE WRITE(6) '2.01H:', TRUE; 
 IF I > 10 THEN WRITE(6) '2.01I:', FALSE; 
 ELSE WRITE(6) '2.01I:', TRUE; 
 IF I >= 2 THEN WRITE(6) '2.01J:', TRUE; 
 ELSE WRITE(6) '2.01J:', FALSE; 
 IF I >= 5 THEN WRITE(6) '2.01K:', TRUE; 
 ELSE WRITE(6) '2.01K:', FALSE; 
 IF I >= 10 THEN WRITE(6) '2.01L:', FALSE; 
 ELSE WRITE(6) '2.01L:', TRUE; 
 IF I = 2 THEN WRITE(6) '2.01M:', FALSE; 
 ELSE WRITE(6) '2.01M:', TRUE; 
 IF I = 5 THEN WRITE(6) '2.01N:', TRUE; 
 ELSE WRITE(6) '2.01N:', FALSE; 
 IF I = 10 THEN WRITE(6) '2.01O:', FALSE; 
 ELSE WRITE(6) '2.01O:', TRUE; 
 IF I ~= 2 THEN WRITE(6) '2.01P:', TRUE; 
 ELSE WRITE(6) '2.01P:', FALSE; 
 IF I ~= 5 THEN WRITE(6) '2.01Q:', FALSE; 
 ELSE WRITE(6) '2.01Q:', TRUE; 
 IF I ~= 10 THEN WRITE(6) '2.01R:', TRUE; 
 ELSE WRITE(6) '2.01R:', FALSE; 

 IF 'ABC' = 'A' || 'BC' THEN WRITE(6) '2.02A:', TRUE; 
 ELSE WRITE(6) '2.02A:', FALSE; 
 IF 'AB' || 'C' = 'ABC' THEN WRITE(6) '2.02B:', TRUE; 
 ELSE WRITE(6) '2.02B:', FALSE; 
 IF 'ABC' = 'AB' THEN WRITE(6) '2.02C:', FALSE; 
 ELSE WRITE(6) '2.02C:', TRUE; 
 
 WRITE(6) ;
 DO FOR TEMPORARY I = 1 TO 10; VN2$I = 1; END;
 WRITE(6) '3.00:', ROUND(VN2$1), ROUND(VN2$2), ROUND(VN2$3), ROUND(VN2$4), 
 	ROUND(VN2$5), 
 	ROUND(VN2$6), ROUND(VN2$7), ROUND(VN2$8), ROUND(VN2$9), ROUND(VN2$10);
 I = 0; DO WHILE I < 10; I = I + 1; VN2$I = I; END;
 WRITE(6) '3.01:', ROUND(VN2$1 + 0), ROUND(-1 + VN2$2), ROUND(VN2$3 / 3), 
 	ROUND(0.25 VN2$4), ROUND(VN2$5 0.2), 
 	ROUND(VN2$6 - 5), ROUND(VN2$7 - 6), ROUND(VN2$8 - 7), 
 	ROUND(VN2$9 - 8), ROUND(VN2$10 - 9);
 	
 DO FOR TEMPORARY I = 1 TO 10; VN2$I = 1; END;
 K = 0; DO FOR TEMPORARY I = 1 TO 10; IF VN2$I = 1 THEN K = K + 1; END;
 IF K = 10 THEN WRITE(6) '3.02:', TRUE; ELSE WRITE(6) '3.02:', FALSE;
 B1=TRUE; I=0; 
 DO WHILE B1; 
 	I=I+1; 
 	IF I>=10 THEN B1=FALSE; 
 	VN2$I = I; 
 END; 	
 K = 0; DO FOR TEMPORARY I = 1 TO 10; IF VN2$I = I THEN K = K + 1; END;
 IF K = 10 THEN WRITE(6) '3.03:', TRUE; ELSE WRITE(6) '3.03:', FALSE;
 
 B1 = TRUE; DO WHILE FALSE; B1 = FALSE; END;
 WRITE(6) '3.04:', B1;
 B1 = FALSE; DO UNTIL TRUE; B1 = TRUE; END;
 WRITE(6) '3.05:', B1;
 
 DO FOR TEMPORARY I = 1 TO 10; VN2$I = 1; END;
 I=0; DO UNTIL I >= 10; I=I+1; VN2$I = I; END; 
 K = 0; DO FOR TEMPORARY I = 1 TO 10; IF VN2$I = I THEN K = K + 1; END;
 IF K = 10 THEN WRITE(6) '3.06:', TRUE; ELSE WRITE(6) '3.06:', FALSE;
 
 WRITE(6) ;
 /* Make TEST4 TRUE to run the various loop tests. As written, they're 
    too time-consuming to do every time, so making TEST4 FALSE skips them. */
 IF TEST4 THEN DO;
 
 WRITE(6) 'The following timing tests take about 3 seconds each ...';
 TEMPORARY SCALAR, START, THISSTART, THISTIME, STOP;
 TEMPORARY INTEGER, DELTA, RUNS CONSTANT(3);
 
 START = RUNTIME; 
 THISSTART = START;
 I = 1; DO WHILE I <= RUNS; 
 	THISTIME = RUNTIME;
 	DO WHILE THISTIME - THISSTART < 1.0; 
 		THISTIME = RUNTIME; 
 	END; 
 	I = I + 1; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = RUNS THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.00:', B1;
 
 START = RUNTIME; 
 THISSTART = START;
 I = 1; DO WHILE I <= RUNS; 
 	DO UNTIL THISTIME - THISSTART >= 1.0; 
 		THISTIME = RUNTIME; 
 	END; 
 	I = I + 1; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = RUNS THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.01:', B1;
 
 START = RUNTIME; 
 THISSTART = START;
 I = 1; DO UNTIL I > RUNS; 
 	THISTIME = RUNTIME;
 	DO WHILE THISTIME < THISSTART + 1.0; 
 		THISTIME = RUNTIME ;
 	END; 
 	I = I + 1; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = RUNS THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.02:', B1;
 
 START = RUNTIME; 
 THISSTART = START;
 I=1; DO UNTIL I > RUNS; 
 	DO UNTIL THISTIME >= THISSTART + 1.0; 
 		THISTIME = RUNTIME;
 	END; 
 	I = I + 1; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = RUNS THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.03:', B1;
 
 START = RUNTIME; 
 THISSTART = START;
 DO FOR TEMPORARY I = 1 TO RUNS; 
 	DO UNTIL THISTIME >= THISSTART + 1.0; 
 		THISTIME = RUNTIME; 
 	END; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = RUNS THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.04:', B1;
 
 START = RUNTIME; 
 THISSTART = START;
 DO FOR TEMPORARY I = 1 TO 2 RUNS BY 2; 
 	DO UNTIL THISTIME >= THISSTART + 1.0; 
 		THISTIME = RUNTIME; 
 	END; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = RUNS THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.05:', B1;
 
 START = RUNTIME; 
 THISSTART = START;
 DO FOR TEMPORARY I = RUNS TO 1 BY -1; 
 	DO UNTIL THISTIME >= THISSTART + 1.0; 
 		THISTIME = RUNTIME; 
 	END; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = RUNS THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.06:', B1;
 
 START = RUNTIME; 
 THISSTART = START;
 DO FOR TEMPORARY I = 1 TO 100 UNTIL I >= RUNS; 
 	DO UNTIL THISTIME >= THISSTART + 1.0; 
 		THISTIME = RUNTIME; 
 	END; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = RUNS THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.07:', B1;
 
 START = RUNTIME; 
 THISSTART = START;
 DO FOR TEMPORARY I = 1 TO 100 WHILE I <= RUNS; 
 	DO UNTIL THISTIME >= THISSTART + 1.0; 
 		THISTIME = RUNTIME; 
 	END; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = RUNS THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.08:', B1;
 
 WRITE(6) 'The following timing tests take about 15 seconds each ...';
 START = RUNTIME; 
 THISSTART = START;
 DO FOR A = 1.4 TO 26.3 BY 1.7; 
 	DO UNTIL THISTIME >= THISSTART + 1.0; 
 		THISTIME = RUNTIME; 
 	END; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = 15 THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.09:', B1;
 
 START = RUNTIME; 
 THISSTART = START;
 DO FOR A = 25.2 TO 0.0 BY -1.7; 
 	DO UNTIL THISTIME >= THISSTART + 1.0; 
 		THISTIME = RUNTIME; 
 	END; 
 	THISSTART = THISTIME; 
 END; 
 STOP = RUNTIME;
 DELTA = ROUND(STOP - START);
 IF DELTA = 15 THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '4.10:', B1;
 
 END; ELSE WRITE(6) 'Skipping 4.xx tests.';
 
 WRITE(6) ;
 /* Function that averages 3 floats. */ 
 AVG3: 
 FUNCTION(X, Y, Z) SCALAR; 
 	DECLARE SCALAR, X, Y, Z, T; 
 
 	/* Function that adds 3 floats. */
 	ADD3: 
 	FUNCTION(X, Y, Z) SCALAR; 
 		DECLARE X, Y, Z; 
 		DECLARE ADD2 FUNCTION SCALAR; 
 		RETURN ADD2(X, ADD2(Y, Z)); 
 		
 		/* Function that adds 2 floats. */
 		ADD2: 
 		FUNCTION(X, Y) SCALAR; 
 			DECLARE X, Y; 
 			RETURN X + Y; 
 		CLOSE; 
 		
 	CLOSE ADD3; 
 
	T = ADD3(X, Y, Z); 
 	RETURN T/3; 
 CLOSE AVG3; 
 IF ABS(AVG3(4, 5, 7) - 5.33333) <= 0.000005 THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '5.00:', B1;
 
 /* A "projection" function that picks out just one
    parameter from among three, using W as an index. */
 PROJECTION3: 
 FUNCTION(W, X, Y, Z); 
 	DECLARE X, Y, Z; 
 	DECLARE W INTEGER; 
 	IF W = 1 THEN RETURN X; 
 	IF W = 2 THEN RETURN Y; 
 	IF W = 3 THEN RETURN Z; 
 	RETURN 0; 
 CLOSE PROJECTION3; 
 IF PROJECTION3(1, 100, 200, 300) = 100.0 THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '5.01A:', B1;
 IF PROJECTION3(2, 100, 200, 300) = 200.0 THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '5.01B:', B1;
 IF PROJECTION3(3, 100, 200, 300) = 300.0 THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '5.01C:', B1;
 
 DECLARE X1 SCALAR INITIAL(0), Y1 SCALAR INITIAL(1), Y2, Z1 SCALAR INITIAL(2); 
 P: 
 PROCEDURE(X) ASSIGN(Y); 
	 DECLARE X, Y; 
	 Y=X; 
 CLOSE; 
 CALL P(39) ASSIGN(Z1); 
 IF Y1 = 1.0 AND Z1 = 39.0 THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '5.02:', B1;
 
 P2: 
 PROCEDURE(A, B, C) ASSIGN(D, E, F); 
	 DECLARE A, B, C, D, E, F; 
	 D = A; 
	 E = B; 
	 F = C; 
 CLOSE P2; 
 CALL P2(123, 245, 789) ASSIGN(X1, Y2, Z1); 
 IF X1 = 123.0 AND Y2 = 245.0 AND Z1 = 789.0 THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '5.03:', B1;
 
 WRITE(6) ;
 DECLARE VC100 VECTOR(5) CONSTANT(1, 1#, 3, *); 
 WRITE(6) '6.00:', TESTCHAR('VC100', 'VECTOR', 4, '1.0, None, 3.0, None, None');
 DECLARE VC101 VECTOR(20) CONSTANT(VC100, 2#(2#(1,2,3), 4), 24); 
 WRITE(6) '6.01:', TESTCHAR('VC101', 'VECTOR', 4, 
 	'1.0, None, 3.0, None, None, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 4.0, 24.0');
 DECLARE VC102 VECTOR(5) CONSTANT(1, 1#2, 3, 4, 5); 
 WRITE(6) '6.02:', TESTCHAR('VC102', 'VECTOR', 4, '1.0, 2.0, 3.0, 4.0, 5.0');
 DECLARE VC103 VECTOR(5) CONSTANT(VC102); 
 WRITE(6) '6.03:', TESTCHAR('VC103', 'VECTOR', 4, '1.0, 2.0, 3.0, 4.0, 5.0');
 DECLARE VC104 VECTOR(20) CONSTANT(VC102, 2#(2#(1,2,3), 4), 24); 
 WRITE(6) '6.04:', TESTCHAR('VC104', 'VECTOR', 4, 
 	'1.0, 2.0, 3.0, 4.0, 5.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 4.0, 24.0');
 DECLARE VC105 VECTOR(10) CONSTANT(1, 2, VC102, 3, 4, 5); 
 WRITE(6) '6.05:', TESTCHAR('VC105', 'VECTOR', 4,
 	'1.0, 2.0, 1.0, 2.0, 3.0, 4.0, 5.0, 3.0, 4.0, 5.0');
 DECLARE A100 ARRAY(20) INTEGER; 
 WRITE(6) '6.06:', TESTINT('A100', 'INTEGER', 16, 20);
 DECLARE B100 ARRAY(20) SCALAR; 
 WRITE(6) '6.07:', TESTINT('B100', 'SCALAR', 16, 20);
 A100 = INTEGER(2#VC100, 10#5); 
 WRITE(6) '6.08A:', 
 	ROUND(A100$1/VC100$1), 
 	ROUND(A100$3/VC100$3), 
 	ROUND(A100$6/VC100$1),
 	ROUND(A100$8/VC100$3),
 	ROUND(A100$11/5), ROUND(A100$12/5), ROUND(A100$13/5), ROUND(A100$14/5), 
 	ROUND(A100$15/5), ROUND(A100$16/5), ROUND(A100$17/5), ROUND(A100$18/5), 
 	ROUND(A100$19/5), ROUND(A100$20/5);
 DECLARE MYTYPE ARRAY(20) CHARACTER(2048);
 MYTYPE = typeofv(INTEGER(2#VC100, 10#5));
 IF MYTYPE$1 = 'INTEGER' AND MYTYPE$16 = '20' THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '6.08B:', B1;
 B100 = SCALAR(3#VC100, 5#6); 
 WRITE(6) '6.09A:', 
 	ROUND(B100$1/VC100$1), 
 	ROUND(B100$3/VC100$3), 
 	ROUND(B100$6/VC100$1),
 	ROUND(B100$8/VC100$3),
 	ROUND(B100$11/VC100$1),
 	ROUND(B100$13/VC100$3),
 	ROUND(B100$16/6), ROUND(B100$17/6), ROUND(B100$18/6), 
 	ROUND(B100$19/6), ROUND(B100$20/6);
 MYTYPE = typeofv(SCALAR(3#VC100, 5#6));
 IF MYTYPE$1 = 'SCALAR' AND MYTYPE$16 = '20' THEN B1 = TRUE; ELSE B1 = FALSE;
 WRITE(6) '6.09B:', B1;
 I = 27; K = 52;
 DECLARE A201 ARRAY(10) INTEGER, BB BOOLEAN; 
 BB = TRUE; 
 DO FOR TEMPORARY I = 1 TO 10; 
 	A201 = INTEGER(1, 2, 3, 4, 2 I, 6, 7, 8, 9, 10); 
 	DO FOR TEMPORARY K = 1 TO 10;
 		IF K = 5 AND A201$K ~= 2 I THEN BB = FALSE;
 		ELSE IF K ~= 5 AND A201$K ~= K THEN BB = FALSE; 
 	END;
 END; 
 WRITE(6) '6.09C:', BB, ROUND(I / 27), ROUND(K / 52);
 
 WRITE(6) ;
 DECLARE B300 BIT(6);
 WRITE(6) '7.00:', TESTINT('B300', 'BIT', 2, 6);
 MYTYPE = typeofv(34);
 IF MYTYPE$1 = 'INTEGER' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.00A:', BB;
 MYTYPE = typeofv(34.2);
 IF MYTYPE$1 = 'SCALAR' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.00B:', BB;
 B300 = 34.2;
 IF INTEGER(B300) = 34 THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.00C:', BB;
 B300 = 98;
 IF INTEGER(B300) = 34 THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.00D:', BB;
 MYTYPE = typeofv(INTEGER(B300));
 IF MYTYPE$1 = 'INTEGER' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.00E:', BB;
 MYTYPE = typeofv(INTEGER('34'));
 IF MYTYPE$1 = 'INTEGER' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.00F:', BB;
 MYTYPE = typeofv(INTEGER('34.2'));
 IF MYTYPE$1 = 'INTEGER' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.00G:', BB;
 
 MYTYPE = typeofv(34.0);
 IF MYTYPE$1 = 'SCALAR' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.01A:', BB;
 MYTYPE = typeofv(34.0);
 IF MYTYPE$1 = 'SCALAR' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.01B:', BB;
 B300 = 98;
 MYTYPE = typeofv(SCALAR(B300));
 IF MYTYPE$1 = 'SCALAR' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.01E:', BB;
 MYTYPE = typeofv(SCALAR('34'));
 IF MYTYPE$1 = 'SCALAR' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.01F:', BB;
 MYTYPE = typeofv(SCALAR('34.2'));
 IF MYTYPE$1 = 'SCALAR' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.01G:', BB;
 
 DECLARE VECTOR, V300 CONSTANT(1.0, 2.0, 3.0), V301, V302; 
 DECLARE MATRIX, M300 CONSTANT(1, 2, 3, 4, 5, 6, 7, 8, 9), M301, M302; 
 DECLARE ARRAY(3), A300; 
 DECLARE A301 ARRAY(9) SCALAR, A302 ARRAY(3) SCALAR; 
 WRITE(6) '7.02A:', TESTCHAR('V300', 'VECTOR', 4, '1.0, 2.0, 3.0');
 WRITE(6) '7.02B:', TESTINT('V301', 'VECTOR', 2, 3);
 WRITE(6) '7.02C:', TESTINT('V302', 'VECTOR', 2, 3);
 WRITE(6) '7.02D:', TESTCHAR('M300', 'MATRIX', 4, 
 				'1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0');
 WRITE(6) '7.02E:', TESTINT('M301', 'MATRIX', 2, 3);
 WRITE(6) '7.02F:', TESTINT('M301', 'MATRIX', 3, 3);
 WRITE(6) '7.02G:', TESTINT('M302', 'MATRIX', 2, 3);
 WRITE(6) '7.02H:', TESTINT('M302', 'MATRIX', 3, 3);
 WRITE(6) '7.02I:', TESTINT('A300', 'SCALAR', 16, 3);
 WRITE(6) '7.02J:', TESTINT('A301', 'SCALAR', 16, 9);
 IF V300$1 = 1.0 AND V300$2 = 2.0 AND V300$3 = 3.0 THEN BB = TRUE; 
 ELSE BB = FALSE;
 WRITE(6) '7.02K:', BB;
 MYTYPE = typeofv(INTEGER(V300));
 IF MYTYPE$1 = 'VECTOR' AND MYTYPE$2 = '3' AND MYTYPE$3 = '' THEN BB = TRUE;
 ELSE BB = FALSE;
 WRITE(6) '7.02L:', BB;
 V301 = INTEGER(V300); 
 MYTYPE = typeofv(V301$1);
 IF MYTYPE$1 = 'SCALAR' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.02M:', BB;
 IF V301$1 = 1 AND V301$2 = 2 AND V301$3 = 3 THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.02N:', BB;
 MYTYPE = typeofv(INTEGER(1#V300));
 IF MYTYPE$1 = 'INTEGER' AND MYTYPE$16 = '3' THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.02O:', BB;
 A300 = INTEGER(1#V300); 
 IF A300$1 = 1 AND V300$2 = 2 AND V300$3 = 3 THEN BB = TRUE; ELSE BB = FALSE;
 WRITE(6) '7.02P:', BB;
 
 BB = TRUE; K = 1;
 DO FOR TEMPORARY I = 1 TO 3; DO FOR TEMPORARY J = 1 TO 3;
 	IF M300$(I,J) ~= K THEN BB = FALSE;
 	K = K + 1;
 END; END;
 WRITE(6) '7.03A:', BB;
 MYTYPE = typeofv(INTEGER(M300));
 M301 = INTEGER(M300);
 BB = TRUE; IF MYTYPE$1 ~= 'MATRIX' THEN BB = FALSE;
 WRITE(6) '7.03B:', BB;
 BB = TRUE; K = 1;
 DO FOR TEMPORARY I = 1 TO 3; DO FOR TEMPORARY J = 1 TO 3;
 	IF M301$(I,J) ~= K THEN BB = FALSE;
 	K = K + 1;
 END; END;
 WRITE(6) '7.03C:', BB;
 MYTYPE = typeofv(INTEGER(1#M300));
 BB = TRUE; 
 IF MYTYPE$1 ~= 'INTEGER' OR MYTYPE$16 ~= '9'THEN BB = FALSE;
 WRITE(6) '7.03D:', BB;
 A301 = INTEGER(1#M300); 
 BB = TRUE; DO FOR TEMPORARY I = 1 TO 9; IF A301$I ~= I THEN BB = FALSE; END;
 WRITE(6) '7.03E:', BB;
 MYTYPE = typeofv(SCALAR(V301));
 BB = TRUE; IF MYTYPE$1 ~= 'VECTOR' THEN BB = FALSE;
 WRITE(6) '7.03F:', BB;
 V302 = SCALAR(V301);
 BB = TRUE; DO FOR TEMPORARY K = 1 TO 3; IF V302$K ~= K THEN BB = FALSE; END;
 WRITE(6) '7.03G:', BB;
 MYTYPE = typeofv(SCALAR(1#V301));
 BB = TRUE; IF MYTYPE$1 ~= 'SCALAR' OR MYTYPE$16 ~= '3' THEN BB = FALSE;
 WRITE(6) '7.03H:', BB;
 A300 = SCALAR(1#V301); 
 BB = TRUE; DO FOR TEMPORARY K = 1 TO 3; IF A300$K ~= K THEN BB = FALSE; END;
 WRITE(6) '7.03I:', BB;
 MYTYPE = typeofv(SCALAR(M301));
 BB = TRUE; 
 IF MYTYPE$1 ~= 'MATRIX' OR MYTYPE$2 ~= '3' OR MYTYPE$3 ~= '3' THEN BB = FALSE;
 WRITE(6) '7.03J:', BB;
 M302 = SCALAR(M301);
 BB = TRUE; K = 1;
 DO FOR TEMPORARY I = 1 TO 3; DO FOR TEMPORARY J = 1 TO 3;
 	IF M302$(I,J) ~= K THEN BB = FALSE;
 	K = K + 1;
 END; END;
 WRITE(6) '7.03K:', BB;
 MYTYPE = typeofv(SCALAR(1#M301));
 BB = TRUE; 
 IF MYTYPE$1 ~= 'SCALAR' OR MYTYPE$16 ~= '9' THEN BB = FALSE;
 WRITE(6) '7.03L:', BB;
 A301 = SCALAR(1#M301);
 BB = TRUE; DO FOR TEMPORARY K = 1 TO 9; IF A301$K ~= K THEN BB = FALSE; END;
 WRITE(6) '7.03M:', BB;
 
 WRITE(6) ;
 DECLARE V400 VECTOR(10), V401 VECTOR(10), V402 VECTOR(10); 
 DECLARE MATRIX, M400, M401, M402; 
 WRITE(6) '8.00A:', NOT initialized(V400);
 V400$1=100; 
 V400$3=200; 
 V400$5=300; 
 BB = TRUE;
 DO FOR TEMPORARY I = 1 TO 10;
 	IF I = 1 OR I = 3 OR I = 5 THEN 
 		DO; IF V400$I ~= ROUND(50 (I + 1)) THEN BB = FALSE; END;
 	ELSE IF initialized(V400$I) THEN BB = FALSE;
 END; 
 WRITE(6) '8.00B:', BB;
 DO FOR TEMPORARY I = 1 TO 10; V401$I = 49 I; END;
 WRITE(6) '8.00C:', initialized(V401);
 WRITE(6) '8.00D:', NOT initialized(M400);
 BB = TRUE;
 DO FOR TEMPORARY I = 1 TO 3; DO FOR TEMPORARY J = 1 TO 3;
 	IF initialized(M300$(I,J)) THEN BB = FALSE;
 END; END;
 WRITE(6) '8.00E:', NOT BB;
 
 MYREVERSE:
 PROCEDURE(V) ASSIGN(W); 
 	DECLARE VECTOR(10), V, W; 
 	DO FOR TEMPORARY I = 1 TO 10; 
 		W$I = V$(11-I); 
 	END; 
 CLOSE MYREVERSE; 
 CALL MYREVERSE(V401) ASSIGN(V402); 
 BB = TRUE;
 DO FOR TEMPORARY I = 1 TO 10;
 	IF V402$I ~= 49 (11 - I) THEN BB = FALSE; 
 END; 
 WRITE(6) '8.01A:', BB;
 
 DO FOR TEMPORARY I = 1 TO 3; 
 	DO FOR TEMPORARY J = 1 TO 3; 
 		M400$(I,J) = 10 I + J; 
 	END; 
 END; 
 DECLARE M400T MATRIX CONSTANT(11, 12, 13, 21, 22, 23, 31, 32, 33);
 DECLARE M401T MATRIX CONSTANT(11, 21, 31, 12, 22, 32, 13, 23, 33);
 BB = TRUE;
 DO FOR TEMPORARY I = 1 TO 3;
 	DO FOR TEMPORARY J = 1 TO 3;
 		IF M400$(I,J) ~= M400T$(I,J) THEN BB = FALSE;
 	END;
 END;
 WRITE(6) '8.01B:', BB;
 
 MYTRANSPOSE:
 PROCEDURE(M) ASSIGN(MT); 
 	DECLARE MATRIX, M, MT; 
 	DO FOR TEMPORARY I = 1 TO 3; 
 		DO FOR TEMPORARY J = 1 TO 3; 
 			MT$(I, J) = M$(J, I); 
 		END; 
 	END; 
 CLOSE MYTRANSPOSE; 
 CALL MYTRANSPOSE(M400) ASSIGN(M401); 
 BB = TRUE;
 DO FOR TEMPORARY I = 1 TO 3;
 	DO FOR TEMPORARY J = 1 TO 3;
 		IF M401$(I,J) ~= M401T$(I,J) THEN BB = FALSE;
 	END;
 END;
 WRITE(6) '8.01C:', BB;
 
 WRITE(6) ;
 DECLARE I590 INTEGER, X590 SCALAR, 
 	B590 BIT(4), B591 BIT(5) INITIAL(23), 
 	B595 BIT(4) INITIAL(5), B596 BIT(4) INITIAL(6), B597 BIT(4) INITIAL(7),
 	C590 CHARACTER(25),
 	V590 VECTOR(5), 
 	M590 MATRIX(4,6), 
 	A590 ARRAY(5) INTEGER, A591 ARRAY(5) VECTOR(4),
 	TST CHARACTER(10);
 I590 = 6;
 TST = '9.00A:'; IF I590 = 6 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 I590 = 5.4;
 TST = '9.00B:'; IF I590 = 5 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 I590 = '7.2';
 TST = '9.00C:'; IF I590 = 7 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 I590 = B591;
 TST = '9.00D:'; IF I590 = 23 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 
 X590 = 6;
 TST = '9.01A:'; IF X590 = 6.0 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 X590 = 5.4;
 TST = '9.01B:'; IF X590 = 5.4 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 X590 = '7.2';
 TST = '9.01C:'; IF X590 = 7.2 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 X590 = B591;
 TST = '9.01D:'; IF X590 = 23.0 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 
 C590 = 6;
 TST = '9.02A:'; IF C590 = '6' THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 WRITE(6) 'Unfortunately, I had to hard-code the implementation-dependent';
 WRITE(6) 'arithmetical precision into test 9.02B below.';
 C590 = 5.4;
 TST = '9.02B:'; 
 IF C590 = ' 5.40000000000000E+00' THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 C590 = '7.2';
 TST = '9.02C:'; IF C590 = '7.2' THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 C590 = B591;
 TST = '9.02D:'; IF C590 = '10111' THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 
 B590 = 6;
 TST = '9.03A:'; IF B590 = B596 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 B590 = 5.4;
 TST = '9.03B:'; IF B590 = B595 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 B590 = '10111';
 TST = '9.03C:'; IF B590 = B597 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 B590 = B591;
 TST = '9.03D:'; IF B590 = B597 THEN WRITE(6) TST, TRUE; ELSE WRITE(6) TST, FALSE;
 
 DECLARE M591 MATRIX(2,3), M592 MATRIX(2,6), M593 MATRIX(4, 3), 
 	BBB BOOLEAN, 
 	A592 ARRAY(2, 3) MATRIX(4,6), A593 ARRAY(2, 3) MATRIX(4, 6),
 	V591 VECTOR(6), V592 VECTOR(4), 
 	A594 ARRAY(3) SCALAR, A595 ARRAY(2) SCALAR;
 DO FOR TEMPORARY I = 1 TO 4;
 	DO FOR TEMPORARY J = 1 TO 6;
 		M590$(I,J) = 10 I + J;
 	END;
 END;
 M591 = M590$(2 TO 3, 3 TO 5);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 3;
 		IF M591$(I, J) ~= 10 (I + 1) + (J + 2) THEN BBB = FALSE;
 	END;
 END;
 TST = '9.04A:'; WRITE(6) TST, BBB;
 M592 = M590$(2 TO 3, *);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 6;
 		IF M592$(I, J) ~= 10 (I + 1) + J THEN BBB = FALSE;
 	END;
 END;
 TST = '9.04B:'; WRITE(6) TST, BBB;
 M593 = M590$(*, 3 TO 5);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 4;
 	DO FOR TEMPORARY J = 1 TO 3;
 		IF M593$(I, J) ~= 10 I + (J + 2) THEN BBB = FALSE;
 	END;
 END;
 TST = '9.04C:'; WRITE(6) TST, BBB;
 M592 = M590$(2 TO 3, 1 TO #);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 6;
 		IF M592$(I, J) ~= 10 (I + 1) + J THEN BBB = FALSE;
 	END;
 END;
 TST = '9.04D:'; WRITE(6) TST, BBB;

 M591 = M590$(2 AT 2, 3 AT 3);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 3;
 		IF M591$(I, J) ~= 10 (I + 1) + (J + 2) THEN BBB = FALSE;
 	END;
 END;
 TST = '9.04E:'; WRITE(6) TST, BBB;
 M592 = M590$(2 AT 2, *);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 6;
 		IF M592$(I, J) ~= 10 (I + 1) + J THEN BBB = FALSE;
 	END;
 END;
 TST = '9.04F:'; WRITE(6) TST, BBB;
 M593 = M590$(*, 3 AT 3);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 4;
 	DO FOR TEMPORARY J = 1 TO 3;
 		IF M593$(I, J) ~= 10 I + (J + 2) THEN BBB = FALSE;
 	END;
 END;
 TST = '9.04G:'; WRITE(6) TST, BBB;
 M592 = M590$(2 AT 2, 6 AT 1);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 6;
 		IF M592$(I, J) ~= 10 (I + 1) + J THEN BBB = FALSE;
 	END;
 END;
 TST = '9.04H:'; WRITE(6) TST, BBB;
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 3;
 		DO FOR TEMPORARY K = 1 TO 4;
 			DO FOR TEMPORARY L = 1 TO 6;
 				A592$(I,J;K,L) = 1000 I + 100 J + 10 K + L;
 			END;
 		END;
 	END;
 END;
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 3;
 		DO FOR TEMPORARY K = 1 TO 4;
 			DO FOR TEMPORARY L = 1 TO 6;
 				IF A592$(I,J;K,L) ~= 1000 I + 100 J + 10 K + L
 				THEN BBB = FALSE;
 			END;
 		END;
 	END;
 END;
 TST = '9.04I:'; WRITE(6) TST, BBB;
 V591 = A592$(1, 2; 3, *);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 6; 
 	IF V591$I ~= 1230 + I THEN BBB = FALSE;
 END;
 TST = '9.04Ja:'; WRITE(6) TST, BBB;
 V592 = A592$(2, 1; *, 4);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 4; 
 	IF V592$I ~= 2104 + 10 I THEN BBB = FALSE;
 END;
 TST = '9.04Jb:'; WRITE(6) TST, BBB;
 A594 = A592$(2, *; 2, 3);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 3; 
 	IF A594$I ~= 2023 + 100 I THEN BBB = FALSE;
 END;
 TST = '9.04K:'; WRITE(6) TST, BBB;
 A595 = A592$(*, 2; 1, 2);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2; 
 	IF A595$I ~= 0212 + 1000 I THEN BBB = FALSE;
 END;
 TST = '9.04L:'; WRITE(6) TST, BBB;
 A593 = A592;
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 3;
 		DO FOR TEMPORARY K = 1 TO 4;
 			DO FOR TEMPORARY L = 1 TO 6;
 				IF A593$(I,J;K,L) ~= 1000 I + 100 J + 10 K + L
 				THEN BBB = FALSE;
 			END;
 		END;
 	END;
 END;
 TST = '9.04M:'; WRITE(6) TST, BBB;
 A593$(1, 1; 2 TO 3, 3 TO 5) = A592$(2, 2; 1 TO 2, 2 TO 4);
 DO FOR TEMPORARY I = 1 TO 2;
 	DO FOR TEMPORARY J = 1 TO 3;
 		DO FOR TEMPORARY K = 1 TO 4;
 			DO FOR TEMPORARY L = 1 TO 6;
 				IF I = 1 AND J = 1 AND K >= 2 AND K <= 3
 					AND L >= 3 AND L <= 5 THEN 
 				DO;
	 				IF A593$(I,J;K,L) ~= 1000 (I + 1) + 
	 						     100 (J + 1) + 
	 						     10 (K - 1) + 
	 						     (L - 1)
	 				THEN BBB = FALSE;
 				END;
 				ELSE DO;
	 				IF A593$(I,J;K,L) ~= 
	 					1000 I + 100 J + 10 K + L
	 				THEN BBB = FALSE;
 				END;
 			END;
 		END;
 	END;
 END;
 TST = '9.04N:'; WRITE(6) TST, BBB;
 
 DECLARE A596I ARRAY(2,3) INTEGER, A596S ARRAY(2,3) SCALAR,
 	 A596V4 ARRAY(2,3) VECTOR(4);
 A596I = INTEGER$(2, 3)(11, 12, 13, 21, 22, 23);
 A596S = SCALAR$(2, 3)(110, 120, 130, 210, 220, 230);
 I = 111;
 A596V4 = SCALAR$(2, 3; 4)(I, 112, 113, 114,
 			   121, 122, 123, 124,
 			   131, 132, 133, 134,
 			   211, 212, 213, 214,
 			   221, 222, 223, 224,
 			   231, 232, 233, 234);
 BBB = TRUE;
 DO FOR TEMPORARY I = 1 TO 2; 
 DO FOR TEMPORARY J = 1 TO 3;
 DO FOR TEMPORARY K = 1 TO 4;
 	IF A596V4$(I, J; K) ~= 100 I + 10 J + K THEN BBB = FALSE;
 END; END; END;
 TST = '9.04O:'; WRITE(6) TST, BBB;
 
 
 WRITE(6) ;
 WRITE(6) 'Execution-speed timing measurement:'; 
 DECLARE STIME, ETIME; 
 STIME = RUNTIME; 
 M = 100000; 
 I = 0; DO WHILE I < M; I = I + 1; END; 
 ETIME = RUNTIME; 
 WRITE(6) M, 'iterations,', ETIME-STIME, 'seconds, ', 
 	  ROUND(M/(ETIME-STIME)), 'iterations/second.'; 
 WRITE(6) ; 
 	
 WRITE(6); 
 WRITE(6) 'Done.'; 
